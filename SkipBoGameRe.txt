
bool SkipBoGame::play(int p){
   bool move = true;
   while (move){
     std::cout << "(m)ove [start] [end] or (d)raw ? ";
     std::string action;
     std::string from;
     std::string to;

     std::cin >> action;
     std::cin >> from;
     std::cin>>to;   //depending on user input (move) checks validity
     while ((from == "0" && (to == "1" || to == "2" || to == "3" || to == "4")) || (action!= "m" && action != "d") || (from != "0" && from != "1" && from != "2" && from != "3" && from != "4" && from != "5" && from != "6" && from != "7" && from != "8" && from != "9")  ||(to != "a" && to != "b" && to != "c" && to != "d" && to != "1" && to != "2" && to != "3" && to != "4" )){
       illegalMove();
       std::cin >> action;
       std::cin >> from;
       std::cin >> to;
     }
	
     std::cout << std::endl;

     int f;
     int t;
     int b;
  
     if (action != "d"){   //just converts from letter to number for easier usage
       f = std::stoi(from);
       if (to == "a" || to == "b" || to == "c" || to == "d"){
	 if (to == "a"){b = 0;}
	 if (to == "b"){b = 1;}
	 if (to == "c"){b = 2;}
	 if (to == "d"){b = 3;}
	       t = 100;
       }
       else{
	 t = std::stoi(to);  
       }
     }
  
  
     if (action == "d"){   //checks if player can draw, then draws if player's hand size is zero
    //draw
       if (peep[p]->handSize() == 0){
	 for (int i = 0; i < 5; i ++){
	   peep[p]->drawToHand();
	 }
       }
     }
     Card c;
     if (action == "m"){   //moves cards depending on where from and where to  
       
       if (f == 0){
	 int temp = peep[p]->getStockCardValue();
	 if (build[b]->size() == 0){
	   c = Card(temp);
	   move = true;
	 }else{
	   if((temp == 0) || (temp == build[b]->topCardValue() + 1)) {
	     c = Card(temp);
		   //c = peep[p]->getStockPileCard();
	     move = true;
	   }else{move = false;illegalMove();}
	 }
       }else if (f >= 1 && f <= 4){
	 int temp = peep[p]->getDiscardCardValue(f);
	 if (build[b]->size() == 0){
	   //c = peep[p]->getDiscardPileCard(f);
	   c = Card(temp);
		 move = true;
	 }else{
	   if((temp == 0) || (temp == build[b]->topCardValue() + 1)) {
	     c = Card(temp);
		   //c = peep[p]->getDiscardPileCard(f);
	     move = true;
	   }else{move = false;illegalMove();}
	 }
       }else if (f >= 5 && f <= 9){
	       //std::cout << "Test1" << std::endl;
	 //      std::cout << f-5 << "." << peep[p]->handSize()-1 << std::endl;
	 	if (f - 5 > peep[p]->handSize()-1){
	   		illegalMove();
	   		move=false;
	   
	 	}else{
	   int temp = peep[p]->getHandCardValue(f);
		
	   if (build[b]->size() == 0){
	     //c = Card(temp);
		   c = peep[p]->getHandPileCard(f);
	//	   std::cout << "Test2" << std::endl;
	     move = true;
	     
	   }else{////////////////////////////////////////////
		  
	     if((temp == 0) || (temp == build[b]->topCardValue() + 1)) {
	       move = true;
	       //c = Card(temp);
		     c = peep[p]->getHandPileCard(f);
	//	     std::cout << "Test3" << std::endl;
	     }else
		if (t <= 4 &&t>=1){     
		     if((temp == peep[p]->getDiscardCardValue(t)+1)){
	     		move = true;
		     	c = peep[p]->getHandPileCard(f);
		     
	     	      }else{move = false; illegalMove();}
		}else{move = false; illegalMove();}
	   }
	 }
       }
       else {
	 move = false;
	       illegalMove();
       }
       
       
       if (move == true){
	 if (t <= 4 && t >= 1){
	   
	   peep[p]->handToDiscard(c, t);
	   
	   return true;
	 }
       }
       if(move) {
	 build[b]->addCard(c);
       }
       //  else {
       
    //display();
    /*std::cout << "(m)ove [start] [end] or (d)raw ? ";
    std::cin >> action;
    std::cin >> from;
    std::cin>>to;
    */
	  
       move = !move;
     }
     
   }
   
   return false;
}
